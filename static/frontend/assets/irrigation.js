import{m as o,p as h,q as u}from"./index.js";const l="http://localhost:8000/api",n=o.create({baseURL:l,headers:{"Content-Type":"application/json"}});n.interceptors.request.use(e=>{const t=localStorage.getItem("access_token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));n.interceptors.response.use(e=>e,async e=>{const t=e.config;if(e.response.status===401&&!t._retry){t._retry=!0;try{const a=localStorage.getItem("refresh_token"),r=await o.post(`${l}/token/refresh/`,{refresh:a}),{access:s}=r.data;return localStorage.setItem("access_token",s),t.headers.Authorization=`Bearer ${s}`,n(t)}catch{localStorage.removeItem("access_token"),localStorage.removeItem("refresh_token"),window.location.href="/login"}}return Promise.reject(e)});const d=h("irrigation",{state:()=>({plans:[],currentPlan:null,loading:!1,error:null,autoSaveInterval:null,unsavedChanges:!1,planHistory:[]}),getters:{getPlanById:e=>t=>e.plans.find(a=>a.id===t),hasUnsavedChanges:e=>e.unsavedChanges,getCurrentPlanHistory:e=>e.planHistory},actions:{async fetchPlans(){var t,a;const e=u();this.loading=!0;try{let r="/plans/";e.isConcessionnaire?r+="?concessionnaire="+((t=e.user)==null?void 0:t.id):e.isUtilisateur&&(r+="?utilisateur="+((a=e.user)==null?void 0:a.id));const s=await n.get(r);this.plans=s.data}catch(r){throw this.error="Erreur lors du chargement des plans",r}finally{this.loading=!1}},async createPlan(e){this.loading=!0;try{const t=await n.post("/plans/",e);return this.plans.push(t.data),t.data}catch(t){throw this.error="Erreur lors de la création du plan",t}finally{this.loading=!1}},startAutoSave(){this.autoSaveInterval||(this.autoSaveInterval=setInterval(async()=>{this.unsavedChanges&&this.currentPlan&&await this.savePlan(this.currentPlan.id)},3e4))},stopAutoSave(){this.autoSaveInterval&&(clearInterval(this.autoSaveInterval),this.autoSaveInterval=null)},async savePlan(e){var t,a;if(this.unsavedChanges){this.loading=!0;try{const r=await n.patch(`/plans/${e}/`,{...this.currentPlan,version:((t=this.currentPlan)==null?void 0:t.version)||1}),s=this.plans.findIndex(i=>i.id===e);return s!==-1&&(this.plans[s]=r.data),((a=this.currentPlan)==null?void 0:a.id)===e&&(this.currentPlan=r.data),this.unsavedChanges=!1,r.data}catch(r){throw this.error="Erreur lors de la sauvegarde du plan",r}finally{this.loading=!1}}},async fetchPlanHistory(e){this.loading=!0;try{const t=await n.get(`/plans/${e}/historique/`);return this.planHistory=t.data,t.data}catch(t){throw this.error="Erreur lors de la récupération de l'historique",t}finally{this.loading=!1}},async restorePlanVersion(e,t){var a;this.loading=!0;try{const r=await n.post(`/plans/${e}/restaurer/`,{version_id:t});((a=this.currentPlan)==null?void 0:a.id)===e&&(this.currentPlan=r.data);const s=this.plans.findIndex(i=>i.id===e);return s!==-1&&(this.plans[s]=r.data),r.data}catch(r){throw this.error="Erreur lors de la restauration de la version",r}finally{this.loading=!1}},setCurrentPlan(e){this.currentPlan=e,this.startAutoSave()},clearCurrentPlan(){this.currentPlan=null,this.stopAutoSave()},markUnsavedChanges(){this.unsavedChanges=!0}}});export{d as u};
