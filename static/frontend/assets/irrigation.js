import{m as l,p as n,q as o}from"./index.js";const h=l("irrigation",{state:()=>({plans:[],currentPlan:null,loading:!1,error:null,autoSaveInterval:null,unsavedChanges:!1,planHistory:[]}),getters:{getPlanById:a=>t=>a.plans.find(s=>s.id===t),hasUnsavedChanges:a=>a.unsavedChanges,getCurrentPlanHistory:a=>a.planHistory},actions:{async fetchPlans(){var t,s;const a=o();this.loading=!0;try{let r="/api/plans/";a.isConcessionnaire?r+="?concessionnaire="+((t=a.user)==null?void 0:t.id):a.isUtilisateur&&(r+="?utilisateur="+((s=a.user)==null?void 0:s.id));const e=await n.get(r);this.plans=e.data}catch(r){throw this.error="Erreur lors du chargement des plans",r}finally{this.loading=!1}},async createPlan(a){this.loading=!0;try{const t=await n.post("/api/plans/",a);return this.plans.push(t.data),t.data}catch(t){throw this.error="Erreur lors de la création du plan",t}finally{this.loading=!1}},startAutoSave(){this.autoSaveInterval||(this.autoSaveInterval=setInterval(async()=>{this.unsavedChanges&&this.currentPlan&&await this.savePlan(this.currentPlan.id)},3e4))},stopAutoSave(){this.autoSaveInterval&&(clearInterval(this.autoSaveInterval),this.autoSaveInterval=null)},async savePlan(a){var t,s;if(this.unsavedChanges){this.loading=!0;try{const r=await n.patch(`/api/plans/${a}/`,{...this.currentPlan,version:((t=this.currentPlan)==null?void 0:t.version)||1}),e=this.plans.findIndex(i=>i.id===a);return e!==-1&&(this.plans[e]=r.data),((s=this.currentPlan)==null?void 0:s.id)===a&&(this.currentPlan=r.data),this.unsavedChanges=!1,r.data}catch(r){throw this.error="Erreur lors de la sauvegarde du plan",r}finally{this.loading=!1}}},async fetchPlanHistory(a){this.loading=!0;try{const t=await n.get(`/api/plans/${a}/historique/`);return this.planHistory=t.data,t.data}catch(t){throw this.error="Erreur lors de la récupération de l'historique",t}finally{this.loading=!1}},async restorePlanVersion(a,t){var s;this.loading=!0;try{const r=await n.post(`/api/plans/${a}/restaurer/`,{version_id:t});((s=this.currentPlan)==null?void 0:s.id)===a&&(this.currentPlan=r.data);const e=this.plans.findIndex(i=>i.id===a);return e!==-1&&(this.plans[e]=r.data),r.data}catch(r){throw this.error="Erreur lors de la restauration de la version",r}finally{this.loading=!1}},setCurrentPlan(a){this.currentPlan=a,this.startAutoSave()},clearCurrentPlan(){this.currentPlan=null,this.stopAutoSave()},markUnsavedChanges(){this.unsavedChanges=!0}}});export{h as u};
