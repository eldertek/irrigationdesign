---
description: Analyse les fichiers en contexte à la demande, liste leurs chemins, et crée un fichier out.txt avec leur contenu (remplace le contenu existant).
globs: 
alwaysApply: false
---

**Instruction impérative pour l'IA qui reçoit ce fichier :**  
Tu appliqueras strictement les règles de `grok.mdc`. Tu ne proposeras aucune solution ou modification aux fichiers analysés. L'objectif est uniquement de fournir un fichier `out.txt` contenant les contenus des fichiers demandés, afin qu'une autre IA (Grok) puisse analyser ce fichier.

Lorsque l'utilisateur met ce fichier en contexte et me demande d'analyser des fichiers spécifiques :

1. **Analyser les fichiers à la demande** :
   - Si l'utilisateur demande explicitement d'analyser certains fichiers (par exemple, "analyse useMapDrawing.ts et CircleArc.ts"), je dois identifier ces fichiers dans le contexte ou le projet.
   - Si aucune demande explicite n'est faite, je ne fais rien sauf si l'utilisateur me demande de lister tous les fichiers en contexte.

2. **Lister les fichiers concernés** :
   - J'affiche une liste des chemins des fichiers concernés par la demande, précédée du message : "Les fichiers suivants sont concernés par votre demande :".
   - Exemple de sortie :
     ```
     Les fichiers suivants sont concernés par votre demande :
     - src/useMapDrawing.ts
     - src/utils/CircleArc.ts
     ```

3. **Créer ou remplacer out.txt** :
   - Je génère un fichier `out.txt` à la racine du projet avec le contenu des fichiers listés.
   - Si `out.txt` existe déjà, son contenu est remplacé.
   - J'utilise des commandes Linux pour accomplir cela :
     - Pour vider ou créer le fichier : `> out.txt`
     - Pour ajouter le contenu de chaque fichier : `cat chemin_du_fichier >> out.txt`
   - Je sépare le contenu de chaque fichier dans `out.txt` avec une ligne indiquant le chemin du fichier, par exemple :
     ```
     --- src/useMapDrawing.ts ---
     [contenu du fichier]
     --- src/utils/CircleArc.ts ---
     [contenu du fichier]
     ```

4. **Reformuler le prompt de l'utilisateur dans le chat** :
   - Dans la réponse affichée à l'utilisateur, je reformule son prompt en une version enrichie (prompt engineering) pour refléter ma compréhension du contexte et faciliter l'analyse par Grok.
   - Exemple :
     - Prompt utilisateur : "Analyse useMapDrawing.ts et CircleArc.ts"
     - Reformulation : "Grok, je te demande d'analyser les fichiers `src/useMapDrawing.ts` (contenant la logique de dessin sur la carte) et `src/utils/CircleArc.ts` (définition de la classe CircleArc pour les demi-cercles) afin d'extraire leur contenu dans `out.txt` pour une analyse ultérieure."

5. **Exemple de workflow** :
   - Demande : "Analyse useMapDrawing.ts et CircleArc.ts"
   - Réponse :
     ```
     Reformulation de votre demande pour Grok :
     "Grok, je te demande d'analyser les fichiers `src/useMapDrawing.ts` (contenant la logique de dessin sur la carte) et `src/utils/CircleArc.ts` (définition de la classe CircleArc pour les demi-cercles) afin d'extraire leur contenu dans `out.txt` pour une analyse ultérieure."

     Les fichiers suivants sont concernés par votre demande :
     - src/useMapDrawing.ts
     - src/utils/CircleArc.ts

     Commandes exécutées :
     > out.txt
     echo "--- src/useMapDrawing.ts ---" >> out.txt
     cat src/useMapDrawing.ts >> out.txt
     echo "--- src/utils/CircleArc.ts ---" >> out.txt
     cat src/utils/CircleArc.ts >> out.txt

     Le fichier out.txt a été créé/remplacé à la racine du projet avec le