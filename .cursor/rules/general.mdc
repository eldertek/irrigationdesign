---
description: Règles générales pour l'ensemble du projet
files: **/*
---

# Règles Générales
- Toujours utiliser un style de code concis et efficace.
- Privilégier la clarté et la lisibilité du code.
- Commenter le code de manière exhaustive, en expliquant le *pourquoi* des choix, pas seulement le *quoi*.
- Utiliser des noms de variables et de fonctions descriptifs.
- Gérer les erreurs de manière robuste avec des messages d'erreur clairs pour l'utilisateur.
- Optimiser le code pour la performance, en particulier les opérations sur la carte et les calculs de surface.
- Toujours considérer l'expérience utilisateur : l'interface doit être intuitive et facile à utiliser.
- S'assurer que le code est facilement maintenable et extensible pour de futures fonctionnalités.

# Authentification et Rôles
- Pour la connexion et la gestion des utilisateurs utiliser une authentification JWT.
- Prévois un rôle administrateur, un rôle concessionnaire et un rôle utilisateur final.
- L'administrateur peut gérer tous les comptes.
- Le concessionnaire à accès aux plans qu'il a fait et peut gérer les utilisateurs finaux.
- Utiliser djangorestframework-simplejwt pour la gestion des tokens.
- Durée de validité des tokens : 60 minutes pour l'accès, 1 jour pour le rafraîchissement.
- L'inscription directe d'utilisateurs est désactivée.
- Seul l'administrateur peut créer de nouveaux utilisateurs via l'interface d'administration.
- Les nouveaux utilisateurs reçoivent un email avec leurs identifiants de connexion temporaires.
- Les utilisateurs doivent changer leur mot de passe à leur première connexion.

# Base de Données
- Utiliser PostgreSQL avec l'extension PostGIS pour les données géospatiales.
- Nom de la base : irrigation_db
- Utilisateur : irrigation_user
- Sécuriser les mots de passe en production.
- Optimiser les requêtes géospatiales avec des index spatiaux.

# API REST
- Utiliser Django REST Framework pour l'API.
- Points d'accès principaux :
  - /api/utilisateurs/ (accessible uniquement aux administrateurs)
  - /api/plans/
  - /api/formes/
  - /api/connexions/
  - /api/annotations/
- Documentation interactive disponible sur /docs/
- Interface de navigation de l'API sur /api-auth/
- Authentification via tokens JWT sur :
  - /api/token/ (obtention)
  - /api/token/refresh/ (rafraîchissement)
- Désactiver les endpoints d'inscription publique
- Restreindre la création d'utilisateurs à l'interface d'administration

# Frontend - Composants
- Utiliser des composants réutilisables autant que possible.
- Séparer clairement la logique de présentation (UI) de la logique métier.
- Utiliser des composants fonctionnels avec des hooks (si applicable au framework choisi).
- Gérer l'état des composants de manière efficace (par exemple, avec un contexte global ou un store si nécessaire).
- Assurer l'accessibilité des composants (WAI-ARIA).
- Créer des composants de formulaire qui gèrent la validation et l'affichage des erreurs.

# Frontend - Carte et Formes
- Privilégier la librairie Leaflet pour la gestion des formes.
- Minimiser la quantité de librairies tierces pour éviter les conflits et faciliter la maintenance.
- Toujours avoir une solution simple et intuitive pour dessiner les formes et établir des connexions.
- Permettre le dessin de formes géométriques : rectangles, cercles, demi-cercles, lignes.
- Calculer et afficher les dimensions (longueurs, rayons) et les surfaces des formes dessinées.
- Gérer les interactions de l'utilisateur (clic, glisser-déposer) de manière fluide.
- Permettre le zoom et le déplacement sur la carte.
- Afficher un profil altimétrique pour les lignes.
- Intégrer une fonctionnalité de connexion de formes entre elles.
- Intégrer un fond de carte (utiliser OpenStreetMap par défaut).

# Frontend - Style
- Utiliser un framework CSS moderne (tailwind, bootstrap...)
- Privilégier un design minimaliste et épuré
- Assurer la compatibilité responsive (mobile, tablette, desktop)

# Backend - API
- Utiliser une architecture RESTful.
- Définir des routes claires et bien documentées.
- Valider les données d'entrée de manière exhaustive.
- Gérer l'authentification et l'autorisation des utilisateurs.
- Utiliser des codes de statut HTTP appropriés.
- Retourner des données au format JSON.
- Gérer les erreurs de manière cohérente (codes d'erreur, messages).
- Optimiser les performances de l'API.

# Backend - Base de données
- Utiliser PostgreSQL avec PostGIS pour les données géospatiales.
- Définir un schéma de base de données clair et optimisé.
- Utiliser l'ORM Django pour simplifier l'interaction avec la base de données.
- Assurer la sécurité des données (prévention des injections SQL, etc.).
- Gérer les migrations de schéma de manière propre.
- Optimiser les requêtes pour la performance.

# Développement
- Utiliser le Makefile pour les commandes courantes :
  - make install : Installation des dépendances
  - make migrations : Création des migrations
  - make migrate : Application des migrations
  - make run : Lancement du serveur
  - make test : Exécution des tests
  - make shell : Shell Django
  - make clean : Nettoyage des fichiers compilés
  - make format : Formatage du code

# Sécurité
- Ne jamais exposer les clés secrètes en production
- Utiliser des variables d'environnement pour les configurations sensibles
- Activer CORS uniquement pour les domaines nécessaires
- Valider toutes les entrées utilisateur
- Utiliser HTTPS en production
- Mettre en place une politique de mots de passe robuste
- Désactiver l'inscription publique d'utilisateurs
- Implémenter un système de journalisation des actions administratives
- Mettre en place un système de notification par email pour les actions sensibles
- Limiter les tentatives de connexion échouées

# Tests
- Écrire des tests unitaires pour les fonctionnalités critiques
- Utiliser pytest pour les tests
- Maintenir une couverture de code satisfaisante
- Tester les cas limites et les erreurs

# Documentation
- Maintenir une documentation à jour pour l'API (/docs/)
- Documenter les choix d'architecture
- Commenter le code de manière pertinente
- Fournir des exemples d'utilisation

# Configurateur
## Formes Géométriques
- Types de formes disponibles :
  - Rectangle
  - Cercle
  - Demi-cercle
  - Ligne
- Toutes les formes doivent être modifiables (taille, position, rotation)
- Assurer une interaction fluide pour la modification des formes

## Connexions et Relations
- Permettre la création de connexions entre différentes formes
- Supporter les connexions entre tous les types de formes (ex: demi-cercle vers rectangle)
- Visualisation claire des connexions sur le plan

## Mesures et Calculs
- Affichage automatique des dimensions des formes
- Calcul et affichage en temps réel des surfaces :
  - Surfaces intérieures
  - Surfaces extérieures
- Mise à jour dynamique des mesures lors des modifications

## Profil Altimétrique
- Intégration d'un système de profil altimétrique
- Interface similaire à Google Earth/Géoportail
- Affichage des variations d'altitude le long des lignes
- Visualisation claire des dénivelés

## Annotations et Textes
- Système d'ajout de textes sur les plans
- Options de formatage du texte
- Positionnement libre des annotations
- Rotation possible des textes

## Gestion des Plans
- Système de sauvegarde automatique
- Historique des modifications
- Export au format PDF avec synthèse complète :
  - Visualisation du plan
  - Mesures et calculs
  - Liste des formes et connexions
  - Annotations

## Interface Utilisateur
- Design minimaliste et intuitif
- Utilisation possible sans formation préalable
- Organisation claire des outils et fonctionnalités
- Retours visuels sur les actions utilisateur
- Messages d'aide contextuels

## Niveaux d'Accès
- Admin Général (Usine) :
  - Accès complet à toutes les fonctionnalités
  - Gestion des concessionnaires
  - Supervision globale
- Concessionnaire :
  - Administration de ses clients spécifiques
  - Accès aux plans de ses clients
  - Gestion des utilisateurs finaux
- Utilisateur Final :
  - Sélection obligatoire d'un concessionnaire
  - Création et modification de ses propres plans
  - Accès limité aux fonctionnalités de base
